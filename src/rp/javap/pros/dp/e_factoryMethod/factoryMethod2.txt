工厂方法模式

导出数据的应用框架		导出数据的应用框架

6.1.1 导出数据的应用框架
	考虑这样一个实际应用:实现一个导出数据的应用框架，来让客户选择数据的导出方式，并真正执行数据导出。
	
	在一些实际的企业应用中，一个公司的系统往往分散在很多不同的地方运行，比如各个各个分公司或者是门市点。
	公司既没有建立全公司专网的实力，但是又不愿意让业务数据实时地在广域网上传递，
	一个是考虑数据安全问题，
	另一个是运行速度的问题。
	
	这种系统通常会有一个折中的方案，那就是各个分公司内运行系统的时候是独立的，是在自己分公司的局域网内运行。
	这种系统通常会有一个折中的方案，那就是各个分公司内运行系统的时候是独立的，是在自己分公司的局域网内运行。
	
	每天业务结束的时候，各个分公司会导出自己的业务数据，然后把业务数据打包，通过网络传递给总公司，或是专人把数据送到总公司，
	然后由总公司进行数据导入和核算。
	
	通常这种系统在导出数据上会有一些约定的方式，比如导出成文本格式、数据备份形式、Excel格式、Xml格式等。
	
6.1.2 框架的基础知识
1.框架是什么
	简单点说，框架就是能完成一定功能的半成品软件。
	就其本质而言，框架是一个软件，而且是一个半成品的软件。
	所谓半成品，就是还不能完全实现用户需要的功能。
	框架只是实现用户需要的功能的一部分，还需要进一步加工，才能成为一个满足用户需要的、完整的软件。
	因此框架级的软件，他的主要客户是开放人员，而不是最终用户。
	
2.框架能干什么
	1)能完成一定功能，加快应用开发速度。
		由于框架完成了一定的功能，而且通常是一些基础的、有难度的、通用的功能，
		这就避免了我们在应用开发的时候完全从头开始，而是在框架已有的功能之上继续开发，也就是说会复用框架的功能，从而加快应用的开发进度。
	
	2)给我一个精良的程序架构
		框架定义了应用的整体结构，包括类和对象的分割、各部分的主要职责、类和对象怎么协作，以及控制流程等。
		Java界流行的框架，大都出自大师之手，设计都很精良。
		基于这样的框架来开发，一般会遵循框架已经规划好的结构来进行开发，
		从而使开发应用程序的结构也相对变得精良了。
	
	3)对框架的理解
		(1)基于框架来开发，事情还是那些事情，只是看谁做得问题。
			也就是说，基于框架来开发，软件要完成的功能并没有变化，还是客户要求的所有功能，
			也就是“事情还是那些事情”的意思。
			但是有了框架后，框架完成了一部分功能，然后开发人员完成一部分功能，
			最合框架和开发人员和起来完成了整个软件的功能，
			也就是看这些功能“由谁做”的问题。
		(2)基于框架开发，可以不去做框架所做额事情，但是应该明白框架在干什么，以及框架是如何实现相应功能的。
			因此，在基于框架开发的是胡，虽然可以不去做框架所做的事情，
			但是应该搞明白框架在干什么，如果条件允许的话，
			还应该搞清楚框架是如何实现相应功能的，
			至少把大致的实现思路和实现步骤搞清楚，
			这样我们才能整体地掌握整个项目，
			才能尽量减少出现项目失控的情况。
			
	4)框架和设计模式的关系
		(1)设计模式比框架更抽象
		(2)设计模式是比框架更小的体系结构元素
		(3)框架比设计模式更加特例化

6.1.3有何问题
	也就是说：对于实现导出数据的业务功能对象，它需要创建ExportFileApi的具体实例对象，
	但是它只知道ExportFileApi接口，而不知道其具体的实现，那该怎么办呢？		

6.2解决方案
6.2.1使用工程方法模式来解决文件
	1.工厂方法模式的定义
		定义一个用于创建对象的接口管，让子类决定实例化哪一个类，Factory Method 是一个类的实例化延迟到其子类。
	
	2.应用工厂方法啊模式来解决问题的思路
		仔细分析上面的问题，事实上在实现导出数据的业务功能对象里面，
		根本就不知道究竟要使用哪一种导出文件的格式，
		因此这个对象根本就不应该和具体的导出文件的对象耦合在一起，
		它只需要面向导出的文件对象的接口就可以了。
		
		但是这样一来，又有新的问题产生了：接口是不能直接使用的，需要使用具体的接口实例对象的实例。
		
		这不是自相矛盾吗？要求面向接口，不让喝具体的实现耦合，但是又需要创建接口的具体实现对象的实例。
		怎么解决这个矛盾呢？
		
		工厂方法模式的解决思想很有意思，那就是不解决，采取无谓而治的方式：
		不是需要接口对象吗，那就定义一个方法来创建；可是事实上它自己是不知道如何创建这个接口对象的，
		没有关系，定义成抽象方法就可以了，自己实现不了，那就让子类来实现，
		这样这个对象本身就可以只是面向接口编程，而无需关心到底如何创建接口对象了。
		
6.2.2 工厂方法模式的结构和说明
	
6.2.4 使用工厂方法模式来实现示例
	要使用工厂方法模式来实现示例，先来按照工厂方法模式的结构，
	对应出哪些是被创建的Product,哪些是Creator.
	分析要实现的功能，导出的文件对象接口ExportFileApi就相当于是Product,
	而用来实现导出数据的业务功能对象就相当于Creator.
	把Product和Creator分开后，就可以分别来实现他们了。
	
	创建导出成数据库备份形式对象的示例代码如下：
	
	客户端直接创建需要使用的Creator对象，然后调用相应的功能方法。示例代码如下：
		
		
6.3 模式讲解
6.3.1 认识工厂方法模式
1.工厂方法模式功能
	工厂方法模式的主要功能是让父类在不知道具体实现的情况下，完成自身的功能调用；
	而具体的实现延迟到子类来实现。
	
	这样在设计的时候，不用去考虑具体的实现，需要某个对象，
	把它通过工厂方法返回就好了，在使用这些对象实现功能的时候还是通过接口来操作。

2.实现成抽象类
	工厂方法的实现中，通常父类会是一个抽象类，里面包含创建所需对象的抽象方法，
	这些方法就是工厂方法。
	
	这里需要注意一个问题，子类在实现这些抽象方法的时候，
	通常并不是真正地由子类来实现具体的功能，而是在子类的方法里做选择，
	选择具体的产品实现对象。
	
	父类里面，通常会有使用这些产品对象来实现一定的功能的方法，
	而且这些方法所实现的功能通常是公共的功能，
	不管子类选择了何种具体的产品实现，
	这些方法的功能总是能正确执行。	
				
3.实现成具体的类
	也可以把父类实现成为一个具体的类。
	这种情况下，通常是在父类中提供获取所需对象的默认实现方法，
	这样即使没有具体的子类，也能够运行。
	
	通常这种情况还是需要具体的子类来决定具体需要如何创建父类所需要的对象。
	同窗这种情况还是需要具体的子类来决定具体要如何创建父类所需要的对象。
	也把这种情况称为工厂方法为子类提供了挂钩。
	通过工厂方法，可以让子类对象来覆盖父类的实现，从而提供更好的灵活性。

5.谁来使用工厂方法创建的对象
	这里首先要弄明白一件事情，就是谁在使用工厂方法创建的对象
	事实上，在工厂方法模式里，应该是Creator中的其他方法在使用工厂方法创建的对象，
	虽然也可以把工厂方法创建对象直接提供给Creator外部使用，但是工厂方法模式的本意，
	是由Creator对象内部的方法来使用工厂方法创建的对象，也就是说，
	工厂方法不提供给Creator外部使用。
	
	客户端应该使用Creator对象，或者是使用由Creator创建出来的对象。
	对于客户端使用Creator对象，这个时候工厂方法创建的对象，是Creator中的某些方法使用；
	对于使用那些由Creator创建出来的对象，这个时候工厂方法创建的对象，是构成客户端需要的对象的一部分。
	
	1)客户端使用Creator对象的情况
		对于“实现导出数据的业务功能对象”的类ExportOperate,它有一个export的方法，
		在这个方法里面，需要使用具体的“导出的文件对象的接口对象”ExportFileApi,
		而ExportOperate是不知道具体的ExportFileApi实现的，那是怎么做的呢？
		就是定义一个工厂方法，用来返回ExportFileApi的对象，然后export方法会使用这个
		工厂方法来来获取它所需要的对象，然后执行功能。
		
	2)客户端使用由Creator创建出来的对象
		另外一种是由Creator向客户端返回由“工厂方法创建的对象”来构建的对象，
		这个时候工厂方法创建的对象，是构成客户端需要的对象的一部分。
		
6.工厂方法模式的调用顺序示意图
6.3.2 工厂方法模式与IOC/DI
	1.如何理解IoC/DI
		参与者都有谁
		依赖：谁依赖于谁，为什么需要依赖？
		注入：谁注入谁，到底注入什么？
		控制反转：谁控制谁，控制什么？为何叫反转（有反转就应该有正转了）？
		依赖注入和控制反转是同一概念吗？
		
		一般有散发参与者，一个是某个对象；另一个是：IoC/DI的容器；还有一个是某个对象的外部资源。
		当然是某个对象依赖与IoC/DI的容器。
		对象需要IoC/DI的容器来提供对象需要的外部资源。
		
		很明显是IoC/DI的容器注入某个对象。
		就是注入某个对象所需要的外部资源。
		当然是IoC/DI的容器来控制对象了。
		控制对象实例的创建。
		
		
	(9)依赖注入和控制反转是同一概念吗？
		依赖注入和控制反转是对同一件事的不同描述。
		从某个方面讲，就是他们描述的角度不同。
		依赖注入是从应用程序的角度去描述，可以把依赖注入描述的完整点：
			应用程序依赖容器创建并注入它所需要的外部资源；
			
			容器控制应用程序，由容器反向地向应用程序注入其所需要额外不资源。
	
	这么小小的改变其实是编程思想的一个大进步，
	这样就有效分离了对象和它所需要的外部资源，使得他们松耦合，有利于功能的复用，
	更重要的是使得程序的整个体系结构变得非常灵活。

6.3.3 平行的类层次结构
	1.平行的类层次结构的含义
		这种平行的类层次结构用来干什么呢？主要用来把一个类层次中某些行为分离出来，
		让类层次中的类把原本属于自己的职责，委托给分离出来的类去实现，从而使得类层次本身变得更简单，
		更容易扩展和复用。
	2.工厂方法模式和平行的类层次结构的关系
		可以使用工厂方法模式来连接平行的类层次。
												
						
			
				
		