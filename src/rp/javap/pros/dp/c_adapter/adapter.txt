适配器模式(Adapter)
	
1.有何问题
		如果把上面的问题抽象一下，用对象来描述，那就是：有一个电源类和旧的硬盘类配合工作得很好，
	现在又有了一个新的硬盘类，现在想让新的硬盘类和电源类也配合使用，但是发现他们的接口无法匹配，
	问题就产生了：如何让原有的电源类的接口能够适应新的硬盘类的电源接口的需要呢？

2.如何解决
		解决方法是采用一个转接线类，转接线可以把电源的接口适配成为新的硬盘所需要的接口，
	那么这个转接线类就类似本章的主角——适配器(Adapter)

4.1.2 同时支持数据库和文件的日志管理
		这是一个在生活中常见的例子，类似的例子很多，比如，各种管道的转接头、不同制式的插座等。
	但是这种例子只能帮助大家理解适配器模式的功能，跟实际的应用系统开发总是有一些差距，让人感觉到好像是理解了模式的功能，
	但是一到真实的系统开发中，就不知道如何使用这个模式了，有些隔靴搔痒的感觉。
		因此，下面还是以实际系统中的例子来讲述，以帮助大家真正理解和应用适配器模式。
	
日志管理第二版
	用户使用日志管理第一版一段时间后，开始考虑升级系统。决定要采用数据库来管理日志。
	很快，按照数据库的日志管理也实现出来，并定义了日志管理的操作接口，
	主要是针对日志的增删改查方法。
	
客户提出了新的要求，能不能让日志管理第二版实现同时支持数据库存储和文件存储两种方式？

有何问题
	问题就在于，现在的业务是使用的第二版的接口，直接使用第二版新加入的实现是没有问题的，
	第二版新加入了保存日志到数据库中；但是对于已有的实现方式，也就是在第一版中采用的文件存储的方式，
	它的操作接口和第二版不一样，这就导致现在客户端无法以同样的方式来直接使用第一版的实现，			
	
	这就意味着，要想同时支持文件和数据库存储两种方式，需要在额外地做一些工作，才可以让第一版的实现适应新的业务需求。
	
	可能有朋友会想，干脆按照第二版的接口要求重新实现一个文件操作的对象不就可以了吗，这样做确实可以，但是何必要重新做
已经完成的功能呢？应该想办法复用，而不是重新实现。

	一种很容易想到的方式是直接修改已有的第一版的代码。这种方式是不太好的，如果直接修改第一版的代码，那么可能导致其他依赖于这些实现的应用不能正常运行，
	在说，有可能第一版和第二版的开发公司是不一样的，在第二版实现的时候，根本拿不到第一版的源代码。	


使用适配器模式来解决问题
	
1.适配器模式的定义
	将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。

2.应用适配器模式来解决问题的思路
	仔细分析上面的问题，问题的根源在于接口的不兼容，功能是基本实现了的，也就是说，只要想办法让两边的接口匹配起来，就可以复用第一版的功能了.
	按照适配器模式的实现方式,可以定义一个类来实现第二版的接口,然后在内部实现的时候,转调第一版已经实现了的功能,这样就可以通过对象组合的方式,
	既服用了第一版已有的功能,同时又在接口上满足了第二版调用的要求.

适配器模式的结构和说明

使用适配器模式来实现示例
	要使用适配器模式来实现示例，关键是要实现适配器对象。
	他需要实现第二版的接口，但是在内部实现的时候，需要调用第一版已经实现的功能。
	也就是说，第二版的接口就相当于适配器模式中的Target接口，而第一版已有的实现就相当于适配器模式中的Adapatee对象。

下面总结一下这个思路
	1.原有文件存取日志的方式，运行得很好，
		[旧客户端]————> [文件存取日志的接口]
	
	2.现在有了新的基于数据库的实现，新的实现有自己的接口，
		[新客户端]————>[日志对象增删改查的接口]<————[新的基于数据库存取日志的方式]
		
	3.现在想要在第二版的实现里面，能够同时兼容第一版的功能，那么就应该有一个类来实现第二版的接口，
		然后在这个类里面去调用已有的功能实现，这个类就是适配器。
		[新客户端]————>[日志对象增删改查的接口]<————[适配器类，通过调用原有的文件存取日志的实现来实现接口要求的功能]————>[文件存取日志的实现方式]
	
	上面是分步的思路，下面来看一下前面示例的整体结构，
	
	如同上面的例子，原本新的日志操作接口不能和旧的文件实现一起工作，但是经过适配器适配后，
	新的日志操作接口就可以和旧的文件实现日志存储一起工作了。


适配器模式讲解

认识适配器模式
1.模式的功能
	适配器模式的主要功能是进行转换匹配，目的是复用已有的功能，而不是来实现的新的接口。
	也就是说，客户端需要的功能应该是已经实现好了的，不需要适配器模式来实现，
	适配器模式主要负责把不兼容的接口转换成客户端期望的样子就可以了。
	
	但这并不是说，在适配器里面就不能实现功能。适配器里面可以实现功能，称这种适配器为智能适配器。
	再说了，在接口匹配和转换的过程中，也有可能需要额外实现一定的功能，才能转换过来，
	比如需要调整参数以进行匹配等。

2.Adaptee和Target的关系
	适配器模式中被适配的接口Adaptee和适配成为的接口Target是没有关联的，
	也就是说，Adaptee和Target中的方法既可以相同，也可以不同。

3.对象组合
	根据前面的实现，你会发现，适配器的实现方式其实是依靠对象组合的方式。
	通过给 适配器对象 组合 被适配的对象，然后当客户端调用Target的时候，适配器会把相应的功能委托给 被适配的对象去完成。


适配器模式的实现

1.适配器的常见实现
	在实现适配器的时候，适配器通常是一个类，
	一般会让适配器类去实现Target接口，
	然后在适配器的具体实现里面调用Adaptee.
	也就是说适配器通常是一个Target类型，而不是Adaptee类型。如同前面的例子演示的那样。

2.智能适配器
	在实际开发中，适配器也可以实现一些Adaptee没有实现，但是在Target中定义的功能。
	这种情况就需要在适配器的实现里面，加入新功能的实现。
	这种适配器被称为智能适配器。
	
	如果要使用智能适配器，一般新加入功能的实现会用到很多Adaptee的功能，相当于Adaptee的功能来实现更高层的功能。
	当然也可以完全实现新加入的功能，和已有的功能都不相关，变相地扩展了功能。

3.适配多个Adaptee
	适配器在适配的时候，可以适配多个Adaptee,也就是说实现某个新的Target的功能的时候，
	需要调用多个模块的功能，适配多个模块的功能才能满足新接口的要求。

4.适配器Adapater实现的复杂程度
	适配器Adapter实现的复杂程度取决于Target和Adapeede 相似程度。

5.缺省适配
	缺省适配的意思是，为一个接口提供缺省实现。有了它，就不用直接去实现接口，
	而是采用继承这个缺省适配对象，从而让子类可以有选择地去覆盖实现需要的方法，对于不需要的方法，
	使用缺省适配的方法就可以了。


双向适配器
	适配器也可以实现双向的适配，前面我们讲的都是把Adaptee适配成为Traget,
	其实也可以把Target适配成为Adaptee.
	也就是说这个适配器可以同时当作Tagret和Adaptee来使用。
	
	继续前面讲述的例子。如果说由于某些原因，第一版和第二版会同时共存一段时间，比如第二版的应用还在不断调整中，
	也就是第二版还不够稳定。客户提出，希望在两版本共存期间，主要还是使用第一版，
	同时希望第一版的日志也能记录到数据库中，
	也就是客户虽然操作的接口是第一版的日志接口，界面也是第一版的界面，但是可以使用第二版的将
	日志记录到数据库的功能。
										
	这里只加了几个新的东西，一个是DB存储日志的实现，前面的例子中没有，
	因为直接被适配成使用文件存储日志的实现了；另为一个就是双向适配器，
	其实吧文件存储的方式适配成为DB实现的接口是一样的，只需要新加上把DB实现的功能适配成为文件实现的接口就可以了。
	
事实上，使用适配器有一个潜在的问题，就是被适配的对象不再兼容Adaptee的接口，因为适配器只是实现了Target的接口。
	这导致并不是所有Adaptee对象可以被使用的地方都能使用适配器。
	
	而双向适配器解决了这样的问题，双向适配器同时实现了Target和Adaptee的接口，使得双向适配器可以在Target或Adaptee
	被使用的地方使用，以提供对所有客户的透明性。尤其在两个不同的客户需要用不同的方式查看同一个对象时，适合使用双向适配器 。
									

何时使用适配器模式
	建议在以下情况中使用适配器模式。
		1.如果你想要使用一个已经存在的类，但是它的接口不符合你的需求，这种情况
		  可以使用适配器模式，来把已有的实现转换成你需要的接口。
		2.如果你想创建一个可以复用的类，这个类可能和一些不兼容的类一起工作，
		  这种情况可以使用适配器模式，到时候需要什么就适配什么。
		3.如果你想使用一些已经存在的子类，但是不可能对每一个子类都进行适配，
		  这种情况可以选用对象适配器，直接适配这些子类的父类就可以了。								